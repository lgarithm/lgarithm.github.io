// Generated by CoffeeScript 1.8.0
(function() {
  var Board, Game, Image, Shape, all_shapes, any, board, cp, hit, mix, pad, renderbmp,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  all_shapes = [["*****"], [".*.", "***"], ["**.", ".**"], [".**", "**."], ["**", "**"]];

  board = function(w, h) {
    var _i, _results;
    return (function() {
      _results = [];
      for (var _i = 1; 1 <= h ? _i <= h : _i >= h; 1 <= h ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function() {
      var _i, _results;
      return (function() {
        _results = [];
        for (var _i = 1; 1 <= w ? _i <= w : _i >= w; 1 <= w ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function() {
        return false;
      });
    });
  };

  pad = function(a, n, z) {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = n - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      if (i < a.length) {
        return a[i];
      } else {
        return z;
      }
    });
  };

  mix = function(p1, p2, w, h) {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = h - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(j) {
        return p1[i][j] || p2[i][j];
      });
    });
  };

  cp = function(p1, p2, w, h) {
    var _i, _ref, _results;
    return (function() {
      _results = [];
      for (var _i = 0, _ref = h - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(i) {
      var _i, _ref, _results;
      return (function() {
        _results = [];
        for (var _i = 0, _ref = w - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(j) {
        return p1[i][j] = p2[i][j];
      });
    });
  };

  hit = function(p1, p2, w, h) {
    var i, j, _i, _j, _ref, _ref1;
    for (i = _i = 1, _ref = h - 1; 1 <= _ref ? _i <= _ref : _i >= _ref; i = 1 <= _ref ? ++_i : --_i) {
      for (j = _j = 1, _ref1 = w - 1; 1 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 1 <= _ref1 ? ++_j : --_j) {
        if (p1[i][j] && p2[i][j]) {
          return true;
        }
      }
    }
  };

  any = function(a) {
    var f;
    f = false;
    a.map(function(x) {
      return f = f || x;
    });
    return f;
  };

  Image = (function() {
    function Image() {}

    Image.prototype.show = function() {
      return (this.bitmap.map(function(r) {
        return (r.map(function(b) {
          if (b) {
            return '#';
          } else {
            return '.';
          }
        })).join('');
      })).join('\n');
    };

    Image.prototype.down = function() {
      var _i, _ref, _results;
      if (any(this.bitmap[this.bitmap.length - 1])) {
        return false;
      }
      this.bitmap.unshift((function() {
        _results = [];
        for (var _i = 1, _ref = this.width; 1 <= _ref ? _i <= _ref : _i >= _ref; 1 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function() {
        return false;
      }));
      return this.bitmap.pop();
    };

    Image.prototype.left = function() {
      var r, _i, _len, _ref;
      _ref = this.bitmap;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (r[0]) {
          return;
        }
      }
      return this.bitmap.map(function(r) {
        r.shift();
        return r.push(false);
      });
    };

    Image.prototype.right = function() {
      var r, _i, _len, _ref;
      _ref = this.bitmap;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        r = _ref[_i];
        if (r[r.length - 1]) {
          return;
        }
      }
      return this.bitmap.map(function(r) {
        r.pop();
        return r.unshift(false);
      });
    };

    return Image;

  })();

  Shape = (function(_super) {
    __extends(Shape, _super);

    function Shape(width, height) {
      var b, h, row, s, shape, w, _, _i, _j, _ref, _ref1, _ref2, _results;
      this.width = width;
      this.height = height;
      shape = all_shapes[Math.floor(Math.random() * 100) % all_shapes.length];
      _ref = [this.width, this.height], w = _ref[0], h = _ref[1];
      s = shape.map(function(r) {
        var _i, _ref1, _results;
        return (function() {
          _results = [];
          for (var _i = 0, _ref1 = r.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 0 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this).map(function(i) {
          return r[i] !== '.';
        });
      });
      b = s.map(function(r) {
        return pad(r, w, false);
      });
      row = (function() {
        _results = [];
        for (var _i = 1, _ref1 = this.width; 1 <= _ref1 ? _i <= _ref1 : _i >= _ref1; 1 <= _ref1 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function() {
        return false;
      });
      this.bitmap = pad(b, h, row);
      for (_ = _j = 0, _ref2 = Math.floor(Math.random() * 100) % this.width; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; _ = 0 <= _ref2 ? ++_j : --_j) {
        this.right();
      }
    }

    return Shape;

  })(Image);

  Board = (function(_super) {
    __extends(Board, _super);

    function Board(width, height) {
      var h, w, _ref;
      this.width = width;
      this.height = height;
      _ref = [this.width, this.height], w = _ref[0], h = _ref[1];
      this.bitmap = board(w, h);
    }

    return Board;

  })(Image);

  Game = (function(_super) {
    __extends(Game, _super);

    function Game(width, height) {
      this.width = width;
      this.height = height;
      this.init();
    }

    Game.prototype.init = function() {
      var h, w, _ref;
      _ref = [this.width, this.height], w = _ref[0], h = _ref[1];
      this.shape = null;
      this.board = new Board(w, h);
      return this.bitmap = board(w, h);
    };

    Game.prototype.froze = function() {
      var b, h, s, w, _ref;
      _ref = [this.board, this.shape, this.width, this.height], b = _ref[0], s = _ref[1], w = _ref[2], h = _ref[3];
      return this.bitmap = mix(b.bitmap, s.bitmap, w, h);
    };

    Game.prototype.next = function() {
      var b, h, m, s, w, _ref, _ref1, _ref2;
      _ref = [this.width, this.height], w = _ref[0], h = _ref[1];
      if (!this.shape) {
        this.shape = new Shape(w, h);
        _ref1 = [this.board, this.shape], b = _ref1[0], s = _ref1[1];
        if (!(hit(b.bitmap, s.bitmap, w, h))) {
          return this.froze();
        } else {
          return this.init();
        }
      }
      _ref2 = [this.board, this.shape], b = _ref2[0], s = _ref2[1];
      if (this.shape.down() !== false && !(hit(b.bitmap, s.bitmap, w, h))) {
        return this.froze();
      }
      m = this.bitmap.filter(function(r) {
        return (r.filter(function(x) {
          return x;
        })).length < w;
      });
      if (m.length < h) {
        [m.length + 1, h].map(function() {
          var _i, _results;
          return m.unshift((function() {
            _results = [];
            for (var _i = 1; 1 <= w ? _i <= w : _i >= w; 1 <= w ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this).map(function() {
            return false;
          }));
        });
      }
      this.board.bitmap = m;
      return this.shape = null;
    };

    Game.prototype.key = function(code) {
      if (this.shape) {
        switch (code) {
          case 37:
            return this.shape.left();
          case 39:
            return this.shape.right();
          case 40:
            return this.next();
        }
      }
    };

    return Game;

  })(Image);

  renderbmp = function(canvas, board, bold) {
    var ctx, h, imageData, w, _i, _ref, _ref1, _ref2, _results;
    _ref = [board.width * bold, board.height * bold], w = _ref[0], h = _ref[1];
    _ref1 = [w, h], canvas.width = _ref1[0], canvas.height = _ref1[1];
    ctx = canvas.getContext("2d");
    imageData = ctx.createImageData(w, h);
    return (function() {
      _results = [];
      for (var _i = 0, _ref2 = board.height - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; 0 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this).map(function(j) {
      var _i, _ref2, _results;
      return (function() {
        _results = [];
        for (var _i = 0, _ref2 = board.width - 1; 0 <= _ref2 ? _i <= _ref2 : _i >= _ref2; 0 <= _ref2 ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this).map(function(i) {
        var c;
        c = (board.bitmap[j][i] ? "00" : "F3");
        ctx.fillStyle = "#FF" + c + "FF";
        return ctx.fillRect(i * bold, j * bold, bold, bold);
      });
    });
  };

  Window.main = function() {
    var c, f, g;
    c = document.createElement('canvas');
    document.body.appendChild(c);
    document.body.appendChild(document.createElement('br'));
    g = new Game(15, 24);
    document.onkeydown = function(e) {
      return g.key(e.keyCode);
    };
    g.render = function() {
      return renderbmp(c, g, 15);
    };
    f = function() {
      g.next();
      return g.render();
    };
    return setInterval(f, 300);
  };

}).call(this);
